from __future__ import print_function

import numpy as np
import select
import signal
import sys
import argparse
import os
from os.path import join as osj
from data_save_utils import save_data

from benchbot_api import BenchBot, ActionResult, Agent
from benchbot_api.tools import ObservationVisualiser

try:
    input = raw_input
except NameError:
    pass


class DataCollectInteractiveAgent(Agent):

    def __init__(self, result_dir):
        self.vis = ObservationVisualiser(vis_list=['image_rgb', 'image_depth', 
                                 'image_class', 'image_instance', 'laser','poses'])
        # Root folder for all data to be saved
        self.result_dir = result_dir
        if not os.path.isdir(result_dir):
            self.run_id = 0
        else:
            self.run_id = -1
        self.step_count = 0

        signal.signal(signal.SIGINT, self._die_gracefully)

    def _die_gracefully(self, sig, frame):
        print("")
        sys.exit(0)

    def is_done(self, action_result):
        # Go forever as long as we have a action_result of SUCCESS
        return action_result != ActionResult.SUCCESS

    def pick_action(self, observations, action_list):
        # Perform a sanity check to confirm we have valid actions available
        if ('move_distance' not in action_list or
                'move_angle' not in action_list):
            raise ValueError(
                "We don't have any usable actions. Is BenchBot running in the "
                "right mode (active), or should it have exited (collided / "
                "finished)?")

        # Update the visualisation
        self.vis.visualise(observations, self.step_count)

        # if it is the first observation, add an entry to the started column
        # also ensure all image folders are available
        if self.step_count == 0:
            
            if self.run_id < 0:
                self.run_id = len([d for d in os.listdir(self.result_dir) 
                                  if os.path.isdir(osj(self.result_dir, d))])
            rgb_img_path = osj(self.result_dir, self.env, 
                                '{0:06d}'.format(self.run_id), 'RGB')
            depth_img_path = osj(self.result_dir, self.env, 
                                '{0:06d}'.format(self.run_id), 'depth')
            inst_img_path = osj(self.result_dir, self.env, 
                                '{0:06d}'.format(self.run_id), 'instance_segment')
            class_img_path = osj(self.result_dir, self.env, 
                                '{0:06d}'.format(self.run_id), 'class_segment')
            laser_path = osj(self.result_dir, self.env, 
                                '{0:06d}'.format(self.run_id), 'laser')
            poses_path = osj(self.result_dir, self.env, 
                                '{0:06d}'.format(self.run_id), 'poses')
            self.paths = {'rgb': rgb_img_path, 'depth': depth_img_path,
                          'instance': inst_img_path, 'class': class_img_path,
                          'laser': laser_path, 'poses': poses_path}
            
            for key, save_path in self.paths.items():    
                if not os.path.isdir(save_path):
                    os.makedirs(save_path)
        
        # Save data for current observation
        save_data(self.paths, observations, self.step_count)

        # Prompt the user to pick an active mode action, returning when they
        # have made a valid selection
        action = None
        action_args = None
        while (action is None):
            try:
                print(
                    "Enter next action (either 'd <distance_in_metres>'"
                    " or 'a <angle_in_degrees>'): ",
                    end='')
                sys.stdout.flush()
                i = None
                while not i:
                    i, _, _ = select.select([sys.stdin], [], [], 0)
                    self.vis.update()
                action_text = sys.stdin.readline().split(" ")
                if action_text[0] == 'a':
                    action = 'move_angle'
                    action_args = {
                        'angle': (0 if len(action_text) == 1 else float(
                            action_text[1]))
                    }
                elif action_text[0] == 'd':
                    action = 'move_distance'
                    action_args = {
                        'distance':
                            0
                            if len(action_text) == 1 else float(action_text[1])
                    }
                else:
                    raise ValueError()
            except Exception as e:
                print(e)
                print("ERROR: Invalid selection")
                action = None
        self.step_count += 1
        return (action, action_args)

    def save_result(self, filename, empty_results, results_format_fns):
        # We have no results, we'll skip saving
        return
    
    def set_env(self, env_details):
        self.env = "{0}_{1}".format(env_details['name'], env_details['variant'])

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--save_root', '-s', default='benchbot_data_active', help='Location of the root folder where data will be stored')
    args = parser.parse_args()

    # Run BenchBot
    benchbot_inst = BenchBot(agent=DataCollectInteractiveAgent(args.save_root))
    benchbot_inst.agent.set_env(benchbot_inst.config['environments'][0])
    benchbot_inst.run()
